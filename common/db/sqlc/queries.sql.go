// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package db

import (
	"context"
)

const getAllPlayerIDs = `-- name: GetAllPlayerIDs :many
SELECT DISTINCT player_id
FROM stats
`

func (q *Queries) GetAllPlayerIDs(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, getAllPlayerIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var player_id int32
		if err := rows.Scan(&player_id); err != nil {
			return nil, err
		}
		items = append(items, player_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTeamIDs = `-- name: GetAllTeamIDs :many
SELECT DISTINCT team_id
FROM stats
`

func (q *Queries) GetAllTeamIDs(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, getAllTeamIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var team_id int32
		if err := rows.Scan(&team_id); err != nil {
			return nil, err
		}
		items = append(items, team_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlayerSeasonAverage = `-- name: GetPlayerSeasonAverage :one
SELECT AVG(points)         as points,
       AVG(rebounds)       as rebounds,
       AVG(assists)        as assists,
       AVG(steals)         as steals,
       AVG(blocks)         as blocks,
       AVG(fouls)          as fouls,
       AVG(turnovers)      as turnovers,
       AVG(minutes_played) as minutes_played
FROM stats
WHERE player_id = $1
`

type GetPlayerSeasonAverageRow struct {
	Points        float64
	Rebounds      float64
	Assists       float64
	Steals        float64
	Blocks        float64
	Fouls         float64
	Turnovers     float64
	MinutesPlayed float64
}

func (q *Queries) GetPlayerSeasonAverage(ctx context.Context, playerID int32) (GetPlayerSeasonAverageRow, error) {
	row := q.db.QueryRow(ctx, getPlayerSeasonAverage, playerID)
	var i GetPlayerSeasonAverageRow
	err := row.Scan(
		&i.Points,
		&i.Rebounds,
		&i.Assists,
		&i.Steals,
		&i.Blocks,
		&i.Fouls,
		&i.Turnovers,
		&i.MinutesPlayed,
	)
	return i, err
}

const getTeamSeasonAverage = `-- name: GetTeamSeasonAverage :one
SELECT AVG(points)         as points,
       AVG(rebounds)       as rebounds,
       AVG(assists)        as assists,
       AVG(steals)         as steals,
       AVG(blocks)         as blocks,
       AVG(fouls)          as fouls,
       AVG(turnovers)      as turnovers,
       AVG(minutes_played) as minutes_played
FROM stats
WHERE team_id = $1
`

type GetTeamSeasonAverageRow struct {
	Points        float64
	Rebounds      float64
	Assists       float64
	Steals        float64
	Blocks        float64
	Fouls         float64
	Turnovers     float64
	MinutesPlayed float64
}

func (q *Queries) GetTeamSeasonAverage(ctx context.Context, teamID int32) (GetTeamSeasonAverageRow, error) {
	row := q.db.QueryRow(ctx, getTeamSeasonAverage, teamID)
	var i GetTeamSeasonAverageRow
	err := row.Scan(
		&i.Points,
		&i.Rebounds,
		&i.Assists,
		&i.Steals,
		&i.Blocks,
		&i.Fouls,
		&i.Turnovers,
		&i.MinutesPlayed,
	)
	return i, err
}

const saveStat = `-- name: SaveStat :exec
INSERT INTO stats (player_id, team_id, points, rebounds, assists, steals, blocks, fouls, turnovers, minutes_played,
                   created_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, NOW())
`

type SaveStatParams struct {
	PlayerID      int32
	TeamID        int32
	Points        int32
	Rebounds      int32
	Assists       int32
	Steals        int32
	Blocks        int32
	Fouls         int32
	Turnovers     int32
	MinutesPlayed float64
}

func (q *Queries) SaveStat(ctx context.Context, arg SaveStatParams) error {
	_, err := q.db.Exec(ctx, saveStat,
		arg.PlayerID,
		arg.TeamID,
		arg.Points,
		arg.Rebounds,
		arg.Assists,
		arg.Steals,
		arg.Blocks,
		arg.Fouls,
		arg.Turnovers,
		arg.MinutesPlayed,
	)
	return err
}
